"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2084],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=s(n),c=r,g=p["".concat(u,".").concat(c)]||p[c]||m[c]||i;return n?a.createElement(g,l(l({ref:t},d),{},{components:n})):a.createElement(g,l({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(87462),r=n(67294),i=n(86010),l=n(12466),o=n(16550),u=n(91980),s=n(67392),d=n(50012);function p(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=m(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[u,s]=g({queryString:n,groupId:a}),[p,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),h=(()=>{const e=u??p;return c({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),s(e),k(e)}),[s,k,i]),tabValues:i}}var h=n(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function _(e){let{className:t,block:n,selectedValue:o,selectValue:u,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),m=e=>{const t=e.currentTarget,n=d.indexOf(t),a=s[n].value;a!==o&&(p(t),u(a))},c=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>d.push(e),onKeyDown:c,onClick:m},l,{className:(0,i.Z)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function L(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function f(e){const t=k(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",b.tabList)},r.createElement(_,(0,a.Z)({},e,t)),r.createElement(L,(0,a.Z)({},e,t)))}function v(e){const t=(0,h.Z)();return r.createElement(f,(0,a.Z)({key:String(t)},e))}},82081:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),i=n(74866),l=n(85162);const o={sidebar_position:4},u="Laser Shooting Game - Multiplayer \ud83c\udfae",s={unversionedId:"tutorial-projects/project-laser-shooting-game-2",id:"tutorial-projects/project-laser-shooting-game-2",title:"Laser Shooting Game - Multiplayer \ud83c\udfae",description:"Perkenalan",source:"@site/docs/tutorial-projects/project-laser-shooting-game-2.md",sourceDirName:"tutorial-projects",slug:"/tutorial-projects/project-laser-shooting-game-2",permalink:"/tutorials/tutorial-projects/project-laser-shooting-game-2",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Laser Shooting Game - Single Player \ud83d\udd2b",permalink:"/tutorials/tutorial-projects/project-laser-shooting-game-1"},next:{title:"Obstacle Avoider Robot \ud83e\udd16",permalink:"/tutorials/tutorial-projects/project-obstacle-avoider-robot"}},d={},p=[{value:"Perkenalan",id:"perkenalan",level:2},{value:"Alat dan Komponen yang diperlukan",id:"alat-dan-komponen-yang-diperlukan",level:2},{value:"Petunjuk Merakit",id:"petunjuk-merakit",level:2},{value:"\u25fc\ufe0f Merakit Komponen Utama",id:"\ufe0f-merakit-komponen-utama",level:3},{value:"\u25fc\ufe0f Wiring Diagram",id:"\ufe0f-wiring-diagram",level:3},{value:"\u25aa\ufe0f Diagram Gambar",id:"\ufe0f-diagram-gambar",level:4},{value:"\u25aa\ufe0f Diagram Tabel",id:"\ufe0f-diagram-tabel",level:4},{value:"- Pemain Pertama",id:"--pemain-pertama",level:5},{value:"- Pemain Kedua",id:"--pemain-kedua",level:5},{value:"Mengetik Program",id:"mengetik-program",level:2},{value:"In Action",id:"in-action",level:2}],m={toc:p},c="wrapper";function g(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,a.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"laser-shooting-game---multiplayer-"},"Laser Shooting Game - Multiplayer \ud83c\udfae"),(0,r.kt)("h2",{id:"perkenalan"},"Perkenalan"),(0,r.kt)("div",{width:"100%",style:{textAlign:"center"}},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Docs Version Dropdown",src:n(17534).Z,width:"612",height:"612"}))),(0,r.kt)("p",null,"Permainan ini sebenarnya lanjutan dari project sebelumnya, hanya saja kali ini kita akan membuat dua buah papan target agar bisa bertanding melawan teman kita."),(0,r.kt)("p",null,"Siapa yang pertama kali memadamkan lampu LED yang berkedip, maka dialah pemenangnya."),(0,r.kt)("h2",{id:"alat-dan-komponen-yang-diperlukan"},"Alat dan Komponen yang diperlukan"),(0,r.kt)(i.Z,{className:"unique-tabs",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Alat \ud83d\udee0",mdxType:"TabItem"},(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Obeng Plus"),(0,r.kt)("li",{parentName:"ul"},"Laser Pointer"))),(0,r.kt)(l.Z,{value:"Komponen Yang Dibutuhkan \ud83d\udd11",mdxType:"TabItem"},(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"1 x Arduino Nano"),(0,r.kt)("li",{parentName:"ul"},"1 x Kabel USB Arduino Nano"),(0,r.kt)("li",{parentName:"ul"},"1 x Komputer/Laptop"),(0,r.kt)("li",{parentName:"ul"},"2 x Servo"),(0,r.kt)("li",{parentName:"ul"},"2 X Lengan Robot"),(0,r.kt)("li",{parentName:"ul"},"2 x Sensor LDR"),(0,r.kt)("li",{parentName:"ul"},"2 x Modul LED"),(0,r.kt)("li",{parentName:"ul"},"1 x Kotak Baterai 2 Slot"),(0,r.kt)("li",{parentName:"ul"},"2 x Baterai"),(0,r.kt)("li",{parentName:"ul"},"Baut seperlunya"),(0,r.kt)("li",{parentName:"ul"},"Kabel Jumper seperlunya")))),(0,r.kt)("h2",{id:"petunjuk-merakit"},"Petunjuk Merakit"),(0,r.kt)("h3",{id:"\ufe0f-merakit-komponen-utama"},"\u25fc\ufe0f Merakit Komponen Utama"),(0,r.kt)("p",null,"Karena project ini merupakan lanjutan dari project sebelumnya, maka petunjuk merakit untuk project ini akan sama seperti pada project sebelumnya."),(0,r.kt)("p",null,"Hanya saja, perbedaannya, pada project sebelumnya, terdapat satu buah Modul LED dan satu buah lengan robot seperti pada gambar di bawah ini."),(0,r.kt)("p",{align:"center",width:"100%"},"    ",(0,r.kt)("img",{width:"100%",src:n(63717).Z,alt:"Ultrasonic Sensors"})," "),(0,r.kt)("p",null,"Sedangkan pada project ini, terdapat dua buah Modul LED dan dua buah lengan robot seperti pada gambar di bawah ini."),(0,r.kt)("p",{align:"center",width:"100%"},"    ",(0,r.kt)("img",{width:"100%",src:n(52578).Z,alt:"Ultrasonic Sensors"})," "),(0,r.kt)("p",null,"Cobalah merakit project ini menggunakan petunjuk pada project sebelumnya, namun dengan modifikasi berupa tambahan satu buah Modul LED dan satu buah lengan robot."),(0,r.kt)("p",null,"Setelah berhasil merakit seperti pada gambar di atas, kembalilah kesini lagi, karena project ini memiliki Wiring Diagramnya sendiri yang harus diikuti di bawah ini."),(0,r.kt)("h3",{id:"\ufe0f-wiring-diagram"},"\u25fc\ufe0f Wiring Diagram"),(0,r.kt)("p",null,"Karena pada Project ini, kita akan membuat Game Laser Shooting agar bisa dimainkan oleh dua pemain, maka kita akan memasang dua buah Modul LED, dua buah Servo Motor, dan dua buah Sensor LDR."),(0,r.kt)("h4",{id:"\ufe0f-diagram-gambar"},"\u25aa\ufe0f Diagram Gambar"),(0,r.kt)("p",null,"Teman-teman bisa gunakan gambar Wiring Diagram di bawah ini sebagai petunjuk untuk merangkai kabel-kabelnya."),(0,r.kt)("div",{width:"100%",style:{textAlign:"center"}},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Docs Version Dropdown",src:n(32653).Z,width:"1740",height:"1200"}))),(0,r.kt)("h4",{id:"\ufe0f-diagram-tabel"},"\u25aa\ufe0f Diagram Tabel"),(0,r.kt)("p",null,"Apabila titik ujung kabel pada gambar di atas kurang jelas, teman-teman bisa gunakan tabel di bawah ini."),(0,r.kt)("h5",{id:"--pemain-pertama"},"- Pemain Pertama"),(0,r.kt)("p",null,"Tabel Diagram di bawah ini sebagai petunjuk untuk memasang komponen untuk sisi pemain pertama. Gunakan sisi kiri sebagai sisi untuk pemain pertama."),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Modul Servo "),(0,r.kt)("th",null,"LDR Sensor")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Modul Servo"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Arduino Nano Expansion Board"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Kabel Kuning"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin 4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Kabel Merah"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Servo Hitam"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin G"))))),(0,r.kt)("td",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"LDR Sensor"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Arduino Nano Expansion Board"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"VCC"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"GND"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin G")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"D0"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin 2"))))))," "),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"LED Module")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"LED Module"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Arduino Nano Expansion Board"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"GND"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin G")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"R"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin 6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Y"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin 7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"G"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin 8"))))))," "),(0,r.kt)("br",null),(0,r.kt)("h5",{id:"--pemain-kedua"},"- Pemain Kedua"),(0,r.kt)("p",null,"Tabel Diagram di bawah ini sebagai petunjuk untuk memasang komponen untuk sisi pemain pertama. Gunakan sisi kanan sebagai sisi untuk pemain kedua."),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Modul Servo "),(0,r.kt)("th",null,"LDR Sensor")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Modul Servo"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Arduino Nano Expansion Board"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Kabel Kuning"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Kabel Merah"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Servo Hitam"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin G"))))),(0,r.kt)("td",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"LDR Sensor"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Arduino Nano Expansion Board"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"VCC"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"GND"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin G")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"D0"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin 3"))))))," "),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"LED Module")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"LED Module"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Arduino Nano Expansion Board"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"GND"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin G")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"R"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin 9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Y"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin 10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"G"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Pin 11"))))))," "),(0,r.kt)("h2",{id:"mengetik-program"},"Mengetik Program"),(0,r.kt)("p",null,"Kemudian ketik program di bawah ini. Setelah selesai mengetik, jalankan proses Verify. Setelah proses verify dan compiling selesai, upload programnya ke Arduino Nano."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-arduino",metastring:'title="RoboKarsa_Laser_Shooter_Game_Multiplayer.ino" showLineNumbers',title:'"RoboKarsa_Laser_Shooter_Game_Multiplayer.ino"',showLineNumbers:!0},"#include<Servo.h>\nint servo_1_RandomPos;\nint servo_2_RandomPos;\n\nint ledCounter_1=0;\nint ledCounter_2=0;\n\nServo servo1;\nServo servo2;\n\n// this constant won't change:\nconst int ldrPin_1 = 2;    // the pin that the LDR Sensor 1 is attached to\nconst int ldrPin_2 = 3;    // the pin that the LDR Sensor 2 is attached to\n\nconst int greenLED_1= 8;       // the pin that the LED is attached to\nconst int yellowLED_1= 7;       // the pin that the LED is attached to\nconst int redLED_1= 6;       // the pin that the LED is attached to\n\nconst int greenLED_2= 11;       // the pin that the LED is attached to\nconst int yellowLED_2= 10;       // the pin that the LED is attached to\nconst int redLED_2= 9;       // the pin that the LED is attached to\n\n// Variables will change:\nint LDR_1_State = 0;         // current state of the LDR Sensor\nint lastLDR_1_State = 0;     // previous state of the LDR Sensor\nint LDR_2_State = 0;         // current state of the LDR Sensor\nint lastLDR_2_State = 0;     // previous state of the LDR Sensor\n\nint led_1_State = LOW;\nint led_2_State = LOW;\n\nunsigned long previousMillis_1 = 0;\nunsigned long previousMillis_2 = 0;\nconst long interval = 200;\n\nvoid setup() {\n  // initialize the button pin as a input:\n  pinMode(ldrPin_1, INPUT);\n  pinMode(ldrPin_2, INPUT);\n\n  // initialize the LED as an output:\n  pinMode(greenLED_1, OUTPUT);\n  pinMode(yellowLED_1, OUTPUT);\n  pinMode(redLED_1, OUTPUT);\n  pinMode(greenLED_2, OUTPUT);\n  pinMode(yellowLED_2, OUTPUT);\n  pinMode(redLED_2, OUTPUT);\n\n  // initialize serial communication:\n  Serial.begin(9600);\n  servo1.attach(4);\n  servo2.attach(5);\n\n  //initialize starting servo sequence\n  servo1.write(0);\n  servo2.write(0);\n  delay(500);\n  servo1.write(150);\n  servo2.write(150);\n  delay(500);\n  servo1.write(0);\n  servo2.write(0);\n  delay(500);\n  servo1.write(150);\n  servo2.write(150);\n  delay(500);\n  servo1.write(90);\n  servo2.write(90);\n  delay(500);\n}\n\n\nvoid loop() {\n//--------------------------FIRST PLAYER SIDE--------------------------//\n  // read the ldr sensor input pin:\n  LDR_1_State = digitalRead(ldrPin_1);\n\n  // compare the LDRState to its previous state\n  if (LDR_1_State != lastLDR_1_State) {\n    // if the state has changed, increment the counter\n    if (LDR_1_State == HIGH) {\n      // if the current state is HIGH then the button went from off to on:\n      servo_1_RandomPos = random(10, 150);\n      digitalWrite(13,LOW);\n      servo1.write(servo_1_RandomPos);\n\n    }\n    else {\n      // if the current state is LOW then the button went from on to off:\n      //digitalWrite(13,HIGH);\n      ledCounter_1++;\n      if(ledCounter_1>0 && ledCounter_1<=3){\n         digitalWrite(greenLED_1, HIGH);\n         digitalWrite(yellowLED_1, LOW);\n         digitalWrite(redLED_1, LOW);\n      }\n      if(ledCounter_1>3 && ledCounter_1<=6){\n        digitalWrite(greenLED_1, LOW);\n        digitalWrite(yellowLED_1, HIGH);\n        digitalWrite(redLED_1, LOW);\n      }\n      if(ledCounter_1>6 && ledCounter_1<=9){\n        digitalWrite(greenLED_1, LOW);\n        digitalWrite(yellowLED_1, LOW);\n        digitalWrite(redLED_1, HIGH);\n      }\n      if(ledCounter_1==10){\n        digitalWrite(greenLED_1, LOW);\n        digitalWrite(yellowLED_1, LOW);\n        digitalWrite(redLED_1, LOW);\n      }\n      else if(ledCounter_1==12){\n        ledCounter_1=0;\n        digitalWrite(greenLED_1, LOW);\n        digitalWrite(yellowLED_1, LOW);\n        digitalWrite(redLED_1, LOW);\n      }\n\n    }\n    // Delay a little bit to avoid bouncing\n    delay(50);\n  }\n  // save the current state as the last state, for next time through the loop\n  lastLDR_1_State = LDR_1_State;\n\nif(ledCounter_1>0 && ledCounter_1<=3){\n          unsigned long currentMillis_1 = millis();\n\n          if (currentMillis_1 - previousMillis_1 >= interval) {\n          // save the last time you blinked the LED\n            previousMillis_1 = currentMillis_1;\n\n          // if the LED is off turn it on and vice-versa:\n          if (led_1_State == LOW) {\n            led_1_State = HIGH;\n          } else {\n            led_1_State = LOW;\n          }\n\n          // set the LED with the ledState of the variable:\n          digitalWrite(greenLED_1, led_1_State);\n          }\n          digitalWrite(yellowLED_1, LOW);\n          digitalWrite(redLED_1, LOW);\n   }\n   if(ledCounter_1>3 && ledCounter_1<=6){\n          unsigned long currentMillis_1 = millis();\n\n          if (currentMillis_1 - previousMillis_1 >= interval) {\n          // save the last time you blinked the LED\n            previousMillis_1 = currentMillis_1;\n\n          // if the LED is off turn it on and vice-versa:\n          if (led_1_State == LOW) {\n            led_1_State = HIGH;\n          } else {\n            led_1_State = LOW;\n          }\n\n          // set the LED with the ledState of the variable:\n          digitalWrite(yellowLED_1, led_1_State);\n          }\n          digitalWrite(greenLED_1, LOW);\n          digitalWrite(redLED_1, LOW);\n   }\n   if(ledCounter_1>6 && ledCounter_1<=9){\n          unsigned long currentMillis_1 = millis();\n\n          if (currentMillis_1 - previousMillis_1 >= interval) {\n          // save the last time you blinked the LED\n            previousMillis_1 = currentMillis_1;\n\n          // if the LED is off turn it on and vice-versa:\n          if (led_1_State == LOW) {\n            led_1_State = HIGH;\n          } else {\n            led_1_State = LOW;\n          }\n\n          // set the LED with the ledState of the variable:\n          digitalWrite(redLED_1, led_1_State);\n          }\n          digitalWrite(yellowLED_1, LOW);\n          digitalWrite(greenLED_1, LOW);\n   }\n\n//--------------------------SECOND PLAYER SIDE--------------------------//\n  // read the ldr sensor input pin:\n  LDR_2_State = digitalRead(ldrPin_2);\n\n  // compare the LDRState to its previous state\n  if (LDR_2_State != lastLDR_2_State) {\n    // if the state has changed, increment the counter\n    if (LDR_2_State == HIGH) {\n      // if the current state is HIGH then the button went from off to on:\n      servo_2_RandomPos = random(10, 150);\n      digitalWrite(13,LOW);\n      servo2.write(servo_2_RandomPos);\n\n    }\n    else {\n      // if the current state is LOW then the button went from on to off:\n      //digitalWrite(13,HIGH);\n      ledCounter_2++;\n      if(ledCounter_2>0 && ledCounter_2<=3){\n         digitalWrite(greenLED_2, HIGH);\n         digitalWrite(yellowLED_2, LOW);\n         digitalWrite(redLED_2, LOW);\n      }\n      if(ledCounter_2>3 && ledCounter_2<=6){\n        digitalWrite(greenLED_2, LOW);\n        digitalWrite(yellowLED_2, HIGH);\n        digitalWrite(redLED_2, LOW);\n      }\n      if(ledCounter_2>6 && ledCounter_2<=9){\n        digitalWrite(greenLED_2, LOW);\n        digitalWrite(yellowLED_2, LOW);\n        digitalWrite(redLED_2, HIGH);\n      }\n      else if(ledCounter_2==10){\n        digitalWrite(greenLED_2, LOW);\n        digitalWrite(yellowLED_2, LOW);\n        digitalWrite(redLED_2, LOW);\n      }\n      else if(ledCounter_2==12){\n        ledCounter_2=0;\n        digitalWrite(greenLED_2, LOW);\n        digitalWrite(yellowLED_2, LOW);\n        digitalWrite(redLED_2, LOW);\n      }\n\n    }\n    // Delay a little bit to avoid bouncing\n    delay(50);\n  }\n  // save the current state as the last state, for next time through the loop\n  lastLDR_2_State = LDR_2_State;\n\nif(ledCounter_2>0 && ledCounter_2<=3){\n          unsigned long currentMillis_2 = millis();\n\n          if (currentMillis_2 - previousMillis_2 >= interval) {\n          // save the last time you blinked the LED\n            previousMillis_2 = currentMillis_2;\n\n          // if the LED is off turn it on and vice-versa:\n          if (led_2_State == LOW) {\n            led_2_State = HIGH;\n          } else {\n            led_2_State = LOW;\n          }\n\n          // set the LED with the ledState of the variable:\n          digitalWrite(greenLED_2, led_2_State);\n          }\n          digitalWrite(yellowLED_2, LOW);\n          digitalWrite(redLED_2, LOW);\n   }\n   if(ledCounter_2>3 && ledCounter_2<=6){\n          unsigned long currentMillis_2 = millis();\n\n          if (currentMillis_2 - previousMillis_2 >= interval) {\n          // save the last time you blinked the LED\n            previousMillis_2 = currentMillis_2;\n\n          // if the LED is off turn it on and vice-versa:\n          if (led_2_State == LOW) {\n            led_2_State = HIGH;\n          } else {\n            led_2_State = LOW;\n          }\n\n          // set the LED with the ledState of the variable:\n          digitalWrite(yellowLED_2, led_2_State);\n          }\n          digitalWrite(greenLED_2, LOW);\n          digitalWrite(redLED_2, LOW);\n   }\n   if(ledCounter_2>6 && ledCounter_2<=9){\n          unsigned long currentMillis_2 = millis();\n\n          if (currentMillis_2 - previousMillis_2 >= interval) {\n          // save the last time you blinked the LED\n            previousMillis_2 = currentMillis_2;\n\n          // if the LED is off turn it on and vice-versa:\n          if (led_2_State == LOW) {\n            led_2_State = HIGH;\n          } else {\n            led_2_State = LOW;\n          }\n\n          // set the LED with the ledState of the variable:\n          digitalWrite(redLED_2, led_2_State);\n          }\n          digitalWrite(yellowLED_2, LOW);\n          digitalWrite(greenLED_2, LOW);\n   }\n}\n//END LOOP()\n")),(0,r.kt)("h2",{id:"in-action"},"In Action"),(0,r.kt)("p",null,"Hasilnya akan seperti pada video pendek berikut"))}g.isMDXComponent=!0},63717:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/plsgs-24-25760c795a8cfab8725774c13566edf7.png"},52578:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/plsgs-25-eeeff66f61c977f255fd8e82b43dea58.png"},32653:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/GAME_ARDUINO_LASER_SHOOTER_MULTIPLAYER_bb-1ef31f658e900af2e3b5a14ac4bddf2c.png"},17534:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/project-laser-shooting-game-2-be52b62f8278691f4fbc5337da32a1dd.jpg"}}]);